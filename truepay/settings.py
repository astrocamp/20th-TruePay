"""
Django settings for truepay_project project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv


# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 票券設定
TICKET_VALIDITY_DAYS = 180  # 票券有效期（天數）


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-iip1xgbl_eh&cl1p81i9*nuvl)qlb$#gj1e+f1it-a!xu1qjio"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 從環境變數讀取 ngrok URL (必須在 .env 中設定)
NGROK_URL = os.getenv("NGROK_URL")
if not NGROK_URL:
    raise ValueError("請在 .env 檔案中設定 NGROK_URL=your-ngrok-id.ngrok-free.app")


# 使用 django-dynamic-host 進行動態 Host 驗證
ALLOWED_HOSTS = ["*"]  # 由 django-dynamic-host 接管驗證
BASE_DOMAIN = "truepay.tw"

# Application definition

INSTALLED_APPS = [
    "dynamic_host",  # 動態 Host 驗證套件
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",  # 為 allauth 需要
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "pages",
    "merchant_account",
    "customers_account",
    "merchant_marketplace",
    "public_store",  # 公開商店頁面
    "storages",
    "payments",
    "accounts",
]

MIDDLEWARE = [
    "dynamic_host.middleware.AllowedHostMiddleWare",  # 動態 Host 驗證 - 必須放最前面
    "django.middleware.security.SecurityMiddleware",
    "truepay.security_middleware.SecurityHeadersMiddleware",
    "django.middleware.cache.UpdateCacheMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "truepay.security_middleware.SessionSecurityMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "truepay.middleware.subdomain_redirect.SubdomainRedirectMiddleware",  # 自訂網域必需
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.cache.FetchFromCacheMiddleware",
]

ROOT_URLCONF = "truepay.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "truepay.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Taipei"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# AWS S3 Settings
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "ap-northeast-1")
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_CUSTOM_DOMAIN = (
    f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
)
AWS_DEFAULT_ACL = "public-read"  # 使用 ACL 設為公開讀取
AWS_DEFAULT_ACL = None
AWS_QUERYSTRING_AUTH = False
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
}

# Media files (uploads)
STORAGES = {
    "default": {
        "BACKEND": "merchant_marketplace.storage_backends.MediaStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}
DEFAULT_FILE_STORAGE = "merchant_marketplace.storage_backends.MediaStorage"
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/"

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.resend.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = "resend"
EMAIL_HOST_PASSWORD = os.getenv("RESEND_API_KEY")
DEFAULT_FROM_EMAIL = "TruePay <noreply@truepay.tw>"

# 藍新金流設定
NEWEBPAY_MERCHANT_ID = os.getenv("NEWEBPAY_MERCHANT_ID")
NEWEBPAY_HASH_KEY = os.getenv("NEWEBPAY_HASH_KEY")
NEWEBPAY_HASH_IV = os.getenv("NEWEBPAY_HASH_IV")

# 藍新金流 URLs（2024年後統一使用同一個URL）
NEWEBPAY_GATEWAY_URL = "https://ccore.newebpay.com/MPG/mpg_gateway"  # 統一網址

# 統一使用同一個網關，環境由商店ID決定
CURRENT_GATEWAY_URL = NEWEBPAY_GATEWAY_URL

# LINE Pay 設定
LINEPAY_CHANNEL_ID = os.getenv("LINEPAY_CHANNEL_ID")
LINEPAY_CHANNEL_SECRET = os.getenv("LINEPAY_CHANNEL_SECRET")
LINEPAY_API_URL = os.getenv("LINEPAY_API_URL", "https://sandbox-api-pay.line.me")

# 付款回調 URLs（需要是完整的 URL）
# 使用 ngrok URL - 請在金流後台設定相同的 URL

# 統一付款系統的回調 URLs
PAYMENT_RETURN_URL = f"https://{NGROK_URL}/payments/newebpay/return/"
PAYMENT_NOTIFY_URL = f"https://{NGROK_URL}/payments/newebpay/notify/"
PAYMENT_CANCEL_URL = f"https://{NGROK_URL}/payments/newebpay/cancel/"

# LINE Pay 回調 URLs
LINEPAY_CONFIRM_URL = f"https://{NGROK_URL}/payments/linepay/confirm/"
LINEPAY_CANCEL_URL = f"https://{NGROK_URL}/payments/linepay/cancel/"

# CSRF 設定 - 信任的來源（包含金流回調需要的網域）
CSRF_TRUSTED_ORIGINS = [
    # 正式網域
    "https://truepay.tw",
    "https://*.truepay.tw",  # 支援所有 truepay.tw 子域名
    "http://truepay.tw",
    "http://*.truepay.tw",  # HTTP 版本的子域名支援
    # 本地開發
    "http://127.0.0.1:8000",
    "http://localhost:8000",
    # ngrok 測試環境
    f"https://{NGROK_URL}",
    f"http://{NGROK_URL}",  # HTTP 版本
    # 金流回調需要
    "https://ccore.newebpay.com",
]

# 登入相關設定
LOGIN_URL = "/customers/login/"

# Session 安全設定
SESSION_COOKIE_SECURE = not DEBUG  # 生產環境使用 HTTPS
SESSION_COOKIE_HTTPONLY = True  # 防止 XSS 攻擊
SESSION_COOKIE_SAMESITE = "Lax"  # CSRF 保護
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # 瀏覽器關閉時清除 Session
SESSION_COOKIE_AGE = 3600  # Session 1小時後過期

SESSION_COOKIE_DOMAIN = f".{BASE_DOMAIN}"
CSRF_COOKIE_DOMAIN = f".{BASE_DOMAIN}"

CLOUDFLARE_API_TOKEN = os.getenv("CLOUDFLARE_API_TOKEN", "")
CLOUDFLARE_ZONE_ID = os.getenv("CLOUDFLARE_ZONE_ID", "")

# 快取設定（防止敏感頁面被快取）
CACHE_MIDDLEWARE_SECONDS = 0  # 不快取頁面
CACHE_MIDDLEWARE_KEY_PREFIX = "truepay"

# 安全 Headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"

AUTH_USER_MODEL = "accounts.Member"

# 核銷前驗證設定
REDEMPTION_VERIFICATION_TIMEOUT = 600  # 10 minutes in seconds

SITE_ID = 1
# Authentication backends
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Django Allauth 配置
ACCOUNT_EMAIL_VERIFICATION = "none"  # 暫時關閉郵件驗證
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_UNIQUE_EMAIL = True

# 登入重導向設定
LOGIN_REDIRECT_URL = "/marketplace/"
LOGOUT_REDIRECT_URL = "/"

# Social Account 配置
SOCIALACCOUNT_ADAPTER = "accounts.adaptor.CustomSocialAccountAdapter"
SOCIALACCOUNT_LOGIN_ON_GET = True

# Google OAuth 設定
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "OAUTH_PKCE_ENABLED": True,
        "APP": {
            "client_id": os.getenv("GOOGLE_OAUTH2_CLIENT_ID"),
            "secret": os.getenv("GOOGLE_OAUTH2_CLIENT_SECRET"),
            "key": "",
        },
    }
}

# Django Dynamic Host 設定
DYNAMIC_HOST_RESOLVER_FUNC = "truepay.host_validation.validate_host"
DYNAMIC_HOST_ALLOW_SITES = False  # 不使用 Django sites framework
